meta:
  id: kfx
  title: Kindle KFX container
  application: "Amazon Kindle"
  file-extension: kfx
  endian: le

seq:
  - id: signature
    type: str
    size: 4
    encoding: ASCII
    doc: "Magic constant \"CONT\" identifying a KFX container"
  - id: version
    type: u2
    doc: "Container format version. Known values are 1 or 2."
  - id: header_len
    type: u4
    doc: "Total size of the container header including metadata text"
  - id: container_info_offset
    type: u4
    doc: "Absolute offset (from start of file) to the Ion container-info structure"
  - id: container_info_length
    type: u4
    doc: "Length in bytes of the Ion container-info structure"
  - id: header_area
    type: header_section
    args:
      - container_info_offset
      - container_info_length
      - header_len
  - id: entity_payload
    type: bytes
    size-eos: true
    doc: |
      Concatenated entity records. Each record begins with the magic string
      \"ENTY\" and contains its own Ion metadata followed by fragment data.

instances:
  header_len_min:
    value: 18
    doc: "Minimum header length mandated by the format"

types:
  header_section:
    params:
      container_info_offset
      container_info_length
      header_len
    seq:
      - id: prefix_area
        type: pre_container_info
        size: container_info_offset - _root.header_len_min
      - id: container_info
        type: ion_payload
        size: container_info_length
      - id: kfxgen_info
        type: kfxgen_text
        size: header_len - container_info_offset - container_info_length

  pre_container_info:
    seq:
      - id: raw
        type: bytes
        size-eos: true
        doc: |
          Header payload stored before the container-info structure. This region
          holds the entity index table followed by optional Ion-encoded document
          symbol tables and format capability blocks. Offsets and lengths for the
          substructures are published through the container-info Ion struct.

  ion_payload:
    seq:
      - id: data
        type: bytes
        size-eos: true
        doc: |
          Ion Binary encoding of the container-info structure. The structure
          carries keys such as $409 (container identifier), $412 (chunk size),
          $413/$414 (entity index table offset/length), $415/$416 (document
          symbol table offset/length) and $594/$595 (format capabilities location).
          A dedicated Ion parser is required to interpret the contents.

  kfxgen_text:
    seq:
      - id: text
        type: str
        size-eos: true
        encoding: ASCII
        doc: |
          ASCII key/value pairs generated by Amazon's kfxgen tool. Typical keys
          include kfxgen_package_version, kfxgen_application_version,
          kfxgen_payload_sha1 and kfxgen_acr. Pairs are stored as
          "key:<value>" and "value:<value>" lines that can be normalised to JSON.

  entity_index_entry:
    seq:
      - id: id_symbol
        type: u4
        doc: "Symbol ID identifying the entity instance"
      - id: type_symbol
        type: u4
        doc: "Symbol ID identifying the fragment type"
      - id: data_offset
        type: u8
        doc: |
          Offset of the entity data relative to the start of the entity payload
          area (i.e. header_len). Values reference raw fragment bytes.
      - id: data_length
        type: u8
        doc: "Length in bytes of the entity payload"

  entity_record:
    seq:
      - id: signature
        type: str
        size: 4
        encoding: ASCII
        doc: "Magic constant \"ENTY\""
      - id: version
        type: u2
        doc: "Entity header version. Currently observed value is 1."
      - id: header_len
        type: u4
        doc: "Length of the entity header region"
      - id: header_payload
        type: bytes
        size: header_len - 10
        doc: "Ion Binary structure carrying $410 (compression) and $411 (DRM)"
      - id: fragment_data
        type: bytes
        size-eos: true
        doc: |
          Fragment payload. The interpretation depends on the fragment type and
          may either be raw binary ($418/$417) or Ion Binary for higher level
          document structures.
